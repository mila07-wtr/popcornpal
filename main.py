import logging
import random
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# üîê –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "7452845663:AAGCZvI2EUCae84pSH9FrvgK_CNCmjijQPs"
KINOPOISK_API_KEY = "2642ce70-0dc7-40e4-8cc9-caa62799dba4"

# üé¨ –ñ–∞–Ω—Ä—ã
GENRES = {
    "–î—Ä–∞–º–∞": 2,
    "–ö–æ–º–µ–¥–∏—è": 13,
    "–ú–µ–ª–æ–¥—Ä–∞–º–∞": 4,
    "–¢—Ä–∏–ª–ª–µ—Ä": 1,
    "–î–µ—Ç–µ–∫—Ç–∏–≤": 5,
    "–£–∂–∞—Å—ã": 17,
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 6,
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": 12,
    "–ë–æ–µ–≤–∏–∫": 11,
    "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–µ–¥–∏—è": 33,
    "–°–µ–º–µ–π–Ω—ã–π": 7,
}


# ‚ñ∂Ô∏è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"genre_{id_}")]
        for name, id_ in GENRES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üçø –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=reply_markup
    )


# ‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    print("üëâ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞:", data)

    if data.startswith("genre_"):
        try:
            genre_id = int(data.split("_")[1])
            context.user_data["genre_id"] = genre_id
            print("‚úÖ –ñ–∞–Ω—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ context.user_data:", context.user_data)
            await send_random_film(query, context)
        except ValueError:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∂–∞–Ω—Ä.")
    elif data == "next":
        await send_random_film(query, context)
    elif data == "menu":
        await start(query, context)


# ‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
async def send_random_film(query, context):
    genre_id = context.user_data.get("genre_id", 13)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    url = "https://kinopoiskapiunofficial.tech/api/v2.2/films"
    params = {
        "type": "FILM",
        "genre": genre_id,
        "order": "NUM_VOTE",
        "ratingFrom": 6,
        "ratingTo": 10,
        "yearFrom": 2010,
        "yearTo": 2025,
        "page": 1
    }
    headers = {
        "X-API-KEY": KINOPOISK_API_KEY,
        "Content-Type": "application/json",
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(url, params=params, headers=headers)
        if response.status_code != 200:
            await query.message.reply_text("üò¢ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤.")
            return

        data = response.json()
        films = data.get("items", [])
        if not films:
            await query.message.reply_text("üò¢ –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        film = random.choice(films)
        film_id = film.get("kinopoiskId")

        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ñ–∏–ª—å–º–µ
        detail_url = f"https://kinopoiskapiunofficial.tech/api/v2.2/films/{film_id}"
        detail_response = await client.get(detail_url, headers=headers)
        if detail_response.status_code != 200:
            await query.message.reply_text("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.")
            return

        detail = detail_response.json()

    # –î–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
    name = detail.get("nameRu") or detail.get("nameEn") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    description = detail.get("description") or "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å –≥–¥–µ-—Ç–æ –≤ –∫–∞–¥—Ä–∞—Ö üé¨"
    if len(description) > 500:
        description = description[:500] + "..."

    rating = detail.get("ratingKinopoisk")
    country = detail.get("countries", [{}])[0].get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = detail.get("year")
    poster = detail.get("posterUrlPreview") or detail.get("posterUrl")
    trailer_url = f"https://www.kinopoisk.ru/film/{film_id}"

    # –ö–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üé≤ –ï—â—ë —Ñ–∏–ª—å–º", callback_data="next"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu"),
        ],
        [InlineKeyboardButton("‚ñ∂ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ", url=trailer_url)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –¢–µ–∫—Å—Ç
    text = f"<b>{name} ({year})</b>\nüåç –°—Ç—Ä–∞–Ω–∞: {country} | ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\nüìù {description}"

    await query.message.reply_photo(
        photo=poster,
        caption=text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("PopcornPal –∑–∞–ø—É—â–µ–Ω... üçø")
    app.run_polling()
